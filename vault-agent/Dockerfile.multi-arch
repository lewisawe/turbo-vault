# Multi-architecture Dockerfile for Vault Agent
# Supports amd64 and arm64 architectures with security hardening

ARG TARGETARCH
ARG TARGETOS

# Build stage
FROM --platform=$BUILDPLATFORM golang:1.23-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application with optimizations
ARG TARGETOS TARGETARCH
RUN CGO_ENABLED=0 GOOS=$TARGETOS GOARCH=$TARGETARCH \
    go build -ldflags="-w -s -X main.version=$(git describe --tags --always)" \
    -o vault-agent ./main.go

# Final stage - distroless for security
FROM gcr.io/distroless/static-debian12:nonroot

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy CA certificates
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the binary
COPY --from=builder /app/vault-agent /usr/local/bin/vault-agent

# Create directories for data and config
USER 65532:65532

# Expose default port
EXPOSE 8200

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/usr/local/bin/vault-agent", "health"]

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/vault-agent"]
CMD ["server"]