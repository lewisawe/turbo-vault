trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - vault-agent/*
      - deployments/*
      - azure-pipelines.yml

pr:
  branches:
    include:
      - main
  paths:
    include:
      - vault-agent/*
      - deployments/*

variables:
  - group: vault-agent-variables
  - name: dockerRegistryServiceConnection
    value: 'vault-agent-registry'
  - name: imageRepository
    value: 'vault-agent/vault-agent'
  - name: containerRegistry
    value: 'vaultagent.azurecr.io'
  - name: dockerfilePath
    value: 'vault-agent/Dockerfile.multi-arch'
  - name: tag
    value: '$(Build.BuildId)'
  - name: vmImageName
    value: 'ubuntu-latest'

stages:
- stage: Test
  displayName: Test and Security Scan
  jobs:
  - job: UnitTests
    displayName: Run Unit Tests
    pool:
      vmImage: $(vmImageName)
    services:
      postgres: postgres:15
      redis: redis:7
    variables:
      POSTGRES_DB: vault_agent_test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      REDIS_URL: redis://localhost:6379
    steps:
    - task: GoTool@0
      inputs:
        version: '1.21'
      displayName: 'Set up Go'

    - script: |
        cd vault-agent
        go mod download
        go mod verify
      displayName: 'Download Go modules'

    - script: |
        cd vault-agent
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
      displayName: 'Run unit tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'vault-agent/test-results.xml'
        failTaskOnFailedTests: true
      displayName: 'Publish test results'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'vault-agent/coverage.xml'
        reportDirectory: 'vault-agent'
      displayName: 'Publish code coverage'

  - job: SecurityScan
    displayName: Security Scan
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: GoTool@0
      inputs:
        version: '1.21'
      displayName: 'Set up Go'

    - script: |
        go install github.com/securecodewarrior/sast-scan/cmd/sast-scan@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest
      displayName: 'Install security tools'

    - script: |
        cd vault-agent
        gosec -fmt json -out gosec-report.json ./...
        govulncheck ./...
      displayName: 'Run security scan'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'vault-agent/gosec-report.json'
        artifactName: 'security-report'
      displayName: 'Publish security report'

  - job: Lint
    displayName: Code Linting
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: GoTool@0
      inputs:
        version: '1.21'
      displayName: 'Set up Go'

    - script: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
      displayName: 'Install golangci-lint'

    - script: |
        cd vault-agent
        golangci-lint run --out-format checkstyle > golangci-lint-report.xml
      displayName: 'Run linting'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'vault-agent/golangci-lint-report.xml'
        testRunTitle: 'Linting Results'
      displayName: 'Publish lint results'

- stage: Build
  displayName: Build and Push Image
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: Build
    displayName: Build Docker Image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push image
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
        arguments: '--platform linux/amd64,linux/arm64'

    - task: AzureCLI@2
      displayName: Generate SBOM
      inputs:
        azureSubscription: 'vault-agent-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az extension add --name sbom
          az sbom create --build-dir vault-agent --output-path sbom.json

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'sbom.json'
        artifactName: 'sbom'
      displayName: 'Publish SBOM'

- stage: ContainerScan
  displayName: Container Security Scan
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: TrivyScan
    displayName: Trivy Container Scan
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: trivy@1
      inputs:
        image: '$(containerRegistry)/$(imageRepository):$(tag)'
        exitCode: 1
        severity: 'HIGH,CRITICAL'
        output: 'trivy-report.sarif'
        format: 'sarif'
      displayName: 'Run Trivy scan'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'trivy-report.sarif'
        artifactName: 'trivy-report'
      displayName: 'Publish Trivy report'

- stage: DeployStaging
  displayName: Deploy to Staging
  dependsOn: [Build, ContainerScan]
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
  jobs:
  - deployment: DeployStaging
    displayName: Deploy to Staging Environment
    pool:
      vmImage: $(vmImageName)
    environment: 'vault-agent-staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubectlInstaller@0
            inputs:
              kubectlVersion: 'v1.28.0'
            displayName: 'Install kubectl'

          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: '3.12.0'
            displayName: 'Install Helm'

          - task: AzureCLI@2
            displayName: 'Get AKS credentials'
            inputs:
              azureSubscription: 'vault-agent-subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group vault-agent-staging-rg --name vault-agent-staging-cluster

          - task: HelmDeploy@0
            displayName: 'Deploy to staging'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'vault-agent-staging-k8s'
              namespace: 'vault-agent-staging'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: 'deployments/helm/vault-agent'
              releaseName: 'vault-agent-staging'
              arguments: |
                --create-namespace
                --set image.tag=$(tag)
                --set environment=staging
                --set replicaCount=2
                --values deployments/helm/vault-agent/values-staging.yaml
                --wait --timeout=10m

          - task: Kubernetes@1
            displayName: 'Wait for deployment'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'vault-agent-staging-k8s'
              namespace: 'vault-agent-staging'
              command: 'wait'
              arguments: '--for=condition=ready pod -l app.kubernetes.io/name=vault-agent --timeout=300s'

- stage: IntegrationTest
  displayName: Integration Tests
  dependsOn: DeployStaging
  condition: succeeded()
  jobs:
  - job: IntegrationTests
    displayName: Run Integration Tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: GoTool@0
      inputs:
        version: '1.21'
      displayName: 'Set up Go'

    - task: AzureCLI@2
      displayName: 'Get AKS credentials'
      inputs:
        azureSubscription: 'vault-agent-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group vault-agent-staging-rg --name vault-agent-staging-cluster

    - script: |
        kubectl port-forward -n vault-agent-staging svc/vault-agent 8200:8200 &
        sleep 10
        curl -f http://localhost:8200/health
      displayName: 'Health check'

    - script: |
        cd vault-agent
        go test -v -tags=integration ./tests/integration/...
      displayName: 'Run integration tests'

- stage: DeployProduction
  displayName: Deploy to Production
  dependsOn: IntegrationTest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployProduction
    displayName: Deploy to Production Environment
    pool:
      vmImage: $(vmImageName)
    environment: 'vault-agent-production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubectlInstaller@0
            inputs:
              kubectlVersion: 'v1.28.0'
            displayName: 'Install kubectl'

          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: '3.12.0'
            displayName: 'Install Helm'

          - task: AzureCLI@2
            displayName: 'Get AKS credentials'
            inputs:
              azureSubscription: 'vault-agent-subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group vault-agent-prod-rg --name vault-agent-prod-cluster

          - task: HelmDeploy@0
            displayName: 'Deploy to production'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'vault-agent-production-k8s'
              namespace: 'vault-agent-prod'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: 'deployments/helm/vault-agent'
              releaseName: 'vault-agent-prod'
              arguments: |
                --create-namespace
                --set image.tag=$(tag)
                --set environment=production
                --set replicaCount=5
                --values deployments/helm/vault-agent/values-production.yaml
                --wait --timeout=15m

          - task: Kubernetes@1
            displayName: 'Wait for deployment'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'vault-agent-production-k8s'
              namespace: 'vault-agent-prod'
              command: 'wait'
              arguments: '--for=condition=ready pod -l app.kubernetes.io/name=vault-agent --timeout=600s'

- stage: SmokeTest
  displayName: Smoke Tests
  dependsOn: DeployProduction
  condition: succeeded()
  jobs:
  - job: SmokeTests
    displayName: Run Smoke Tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: GoTool@0
      inputs:
        version: '1.21'
      displayName: 'Set up Go'

    - task: AzureCLI@2
      displayName: 'Get AKS credentials'
      inputs:
        azureSubscription: 'vault-agent-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group vault-agent-prod-rg --name vault-agent-prod-cluster

    - script: |
        kubectl port-forward -n vault-agent-prod svc/vault-agent 8200:8200 &
        sleep 15
        curl -f http://localhost:8200/health
        curl -f http://localhost:8200/metrics
        curl -f http://localhost:8200/ready
      displayName: 'Production health checks'

    - script: |
        cd vault-agent
        go test -v -tags=smoke ./tests/smoke/...
      displayName: 'Run smoke tests'

    - task: InvokeRESTAPI@1
      displayName: 'Notify Slack - Success'
      condition: succeeded()
      inputs:
        connectionType: 'connectedServiceName'
        serviceConnection: 'slack-webhook'
        method: 'POST'
        headers: |
          Content-Type: application/json
        body: |
          {
            "text": ":white_check_mark: Vault Agent successfully deployed to production!\n*Build:* $(Build.BuildNumber)\n*Commit:* $(Build.SourceVersion)\n*Pipeline:* $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
          }

    - task: InvokeRESTAPI@1
      displayName: 'Notify Slack - Failure'
      condition: failed()
      inputs:
        connectionType: 'connectedServiceName'
        serviceConnection: 'slack-webhook'
        method: 'POST'
        headers: |
          Content-Type: application/json
        body: |
          {
            "text": ":x: Vault Agent production deployment failed!\n*Build:* $(Build.BuildNumber)\n*Commit:* $(Build.SourceVersion)\n*Pipeline:* $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
          }